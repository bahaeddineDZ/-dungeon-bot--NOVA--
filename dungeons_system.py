import json
import random
import time
import os
from datetime import datetime, timedelta
import discord
from discord.ext import commands

# ูููุงุช ุงูุจูุงูุงุช
DUNGEONS_FILE = "dungeons_data.json"
EQUIPMENT_FILE = "equipment_data.json"
DUNGEON_COOLDOWNS_FILE = "dungeon_cooldowns.json"

# ุฅุนุฏุงุฏุงุช ุงูุชุจุฑูุฏ (ุจุงูุซูุงูู)
DUNGEON_COOLDOWNS = {
    "entry": 1800,      # 30 ุฏูููุฉ ุจูู ุฏุฎูู ุงูุณุฑุงุฏูุจ
    "daily_limit": 86400,  # ุญุฏ ุฃูุตู 5 ูุญุงููุงุช ููููุงู
    "boss_defeat": 3600,   # ุณุงุนุฉ ูุงุญุฏุฉ ุจุนุฏ ูุฒููุฉ ุฒุนูู ูุนูู
    "death_penalty": 900   # 15 ุฏูููุฉ ุนููุจุฉ ุงูููุช
}

# ======== ุชุนุฑูู ุงูุณุฑุงุฏูุจ ุงููุญุฏุซุฉ ========
DUNGEONS = {
    "๐๏ธ ุณุฑุฏุงุจ ุงููุจุชุฏุฆูู": {
        "level": 1,
        "tier": "ุนุงุฏู",
        "description": "ุณุฑุฏุงุจ ููุฌูุฑ ูููุก ุจุงูุฌุฑุฐุงู ูุงูููุงูู ุงูุนุธููุฉ ุงูุถุนููุฉ. ููุงุณุจ ูููุญุงุฑุจูู ุงูุฌุฏุฏ.",
        "boss": "๐ ูููู ุนุธูู ูุฏูู",
        "boss_hp": 200,
        "boss_attack": 30,
        "boss_defense": 15,
        "boss_abilities": ["๐ฉธ ุถุฑุจุฉ ูุงุฒูุฉ", "๐ก๏ธ ุชุนุงูู ุจุทูุก"],
        "entry_cost": {"ูุงุณ": 2},
        "rewards": {
            "ุฐูุจ": [15, 35],
            "ุฏููุงุฑ": [75000, 150000],
            "experience": [100, 200]
        },
        "rare_drops": {
            "๐ก๏ธ ุณูู ุงูุนุธุงู ุงููุงุฏุฑ": 0.05,  # 5% ูุฑุตุฉ
            "๐งช ุฌุฑุนุฉ ููุฉ ุตุบูุฑุฉ": 0.15
        },
        "required_level": 1,
        "estimated_time": "5-10 ุฏูุงุฆู"
    },
    "๐ ููู ุงูุฃููุงุฌ": {
        "level": 2,
        "description": "ููู ูุงุฆู ุชุญุฑุณู ูุญูุด ุงูุจุญุฑ. ุงุญุฐุฑ ูู ุงูุฃููุงุฌ ุงูุนุงุชูุฉ!",
        "boss": "๐ ุฃุฎุทุจูุท ุนููุงู",
        "boss_hp": 300,
        "boss_attack": 40,
        "boss_defense": 20,
        "entry_cost": {"ูุงุณ": 3},
        "rewards": {
            "ุฐูุจ": [25, 50],
            "ุฏููุงุฑ": [100000, 200000]
        },
        "required_level": 5
    },
    "๐ฅ ุจุฑุฌ ุงูููุจ": {
        "level": 3,
        "description": "ุจุฑุฌ ูุญุงุท ุจุงูููุฑุงู ุงูุฃุจุฏูุฉ. ูุญูุด ุงููุงุฑ ุชููุฃ ูู ุทุงุจู.",
        "boss": "๐ฅ ุชููู ุงููุงุฑ ุงูุฃุญูุฑ",
        "boss_hp": 500,
        "boss_attack": 60,
        "boss_defense": 35,
        "entry_cost": {"ูุงุณ": 5},
        "rewards": {
            "ุฐูุจ": [50, 100],
            "ุฏููุงุฑ": [200000, 400000]
        },
        "required_level": 15
    },
    "๐ ูุตุฑ ุงูููุช": {
        "level": 4,
        "description": "ูุตุฑ ูุณููู ุจุฃุฑูุงุญ ุงููุญุงุฑุจูู ุงูุณุงูุทูู. ุงูููุช ูุฌูู ูู ูู ุฒุงููุฉ.",
        "boss": "๐ป ููู ุงูุฃุดุจุงุญ",
        "boss_hp": 800,
        "boss_attack": 85,
        "boss_defense": 50,
        "entry_cost": {"ูุงุณ": 8},
        "rewards": {
            "ุฐูุจ": [100, 200],
            "ุฏููุงุฑ": [400000, 800000]
        },
        "required_level": 25
    },
    "โก ุนุฑุด ุงูุขููุฉ": {
        "level": 5,
        "tier": "ุฃุณุทูุฑู",
        "description": "ุฃูุฏุณ ุงูุฃูุงูู ูุฃุฎุทุฑูุง. ููุง ูููู ุฅูู ุงูุญุฑุจ ุงูููุชูู.",
        "boss": "โก ุฅูู ุงูุญุฑุจ ุงูุฃุณุทูุฑู",
        "boss_hp": 1500,
        "boss_attack": 150,
        "boss_defense": 100,
        "boss_abilities": ["โก ุตุงุนูุฉ ุงูุบุถุจ", "๐ช๏ธ ุนุงุตูุฉ ุงูุฏูุงุฑ", "๐ก๏ธ ุฏุฑุน ููุฏุณ"],
        "entry_cost": {"ูุงุณ": 20},
        "rewards": {
            "ุฐูุจ": [300, 500],
            "ุฏููุงุฑ": [1200000, 2000000],
            "experience": [800, 1200]
        },
        "rare_drops": {
            "๐ ุชุงุฌ ุฅูู ุงูุญุฑุจ": 0.01,  # 1% ูุฑุตุฉ ูุงุฏุฑุฉ ุฌุฏุงู
            "โก ุตููุฌุงู ุงูุจุฑู": 0.03,
            "๐งช ุฅูุณูุฑ ุงูุขููุฉ": 0.08
        },
        "required_level": 50,
        "estimated_time": "20-30 ุฏูููุฉ"
    },
    "๐ ุฌุญูู ุงูุชูุงููู": {
        "level": 6,
        "tier": "ููุญูู",
        "description": "ุจุฑูุงู ููุชูุจ ูุณููู ุฃููู ุงูุชูุงููู. ููุท ุงูุฃุจุทุงู ุงูุฃุณุทูุฑููู ูุฌุฑุคูู ุนูู ุฏุฎููู.",
        "boss": "๐ฒ ููู ุงูุชูุงููู ุงููุงุฑูุฉ",
        "boss_hp": 2000,
        "boss_attack": 200,
        "boss_defense": 120,
        "boss_abilities": ["๐ฅ ููุณ ุงููุงุฑ ุงููุฏูุฑ", "๐ ุซูุฑุงู ุจุฑูุงูู", "๐ก๏ธ ูุดูุฑ ูุงุณูุฉ", "๐ ูุนูุฉ ุงูุชููู"],
        "entry_cost": {"ูุงุณ": 35},
        "rewards": {
            "ุฐูุจ": [500, 800],
            "ุฏููุงุฑ": [2000000, 3500000],
            "experience": [1500, 2000]
        },
        "rare_drops": {
            "๐ฒ ููุจ ุงูุชููู ุงูุฃุจุฏู": 0.005,  # 0.5% ูุงุฏุฑ ุฌุฏุงู
            "๐ฅ ุฏุฑุน ูุดูุฑ ุงูุชููู": 0.02,
            "๐ก๏ธ ูุตู ุงูููุจ ุงูููุฏุณ": 0.04
        },
        "required_level": 75,
        "estimated_time": "30-45 ุฏูููุฉ"
    },
    "๐ ุจูุนุฏ ุงูุธูุงู ุงููุงููุงุฆู": {
        "level": 7,
        "tier": "ุฃุณุทูุฑู+",
        "description": "ุจูุนุฏ ูุธูู ุฎุงุฑุฌ ุญุฏูุฏ ุงููุงูุน. ููุง ุชุณูู ูุงุฆูุงุช ูู ุนูุงูู ุฃุฎุฑู ูุง ูููู ุชุตูุฑูุง.",
        "boss": "๐๏ธ ุนูู ุงููุฑุงุบ ุงูุฃุฒููุฉ",
        "boss_hp": 3000,
        "boss_attack": 300,
        "boss_defense": 180,
        "boss_abilities": ["๐ ุงูููุงุฑ ุงููุงูุน", "๐๏ธ ูุธุฑุฉ ุงูุฌููู", "๐ณ๏ธ ุซูุจ ุฃุณูุฏ", "๐ ูุญู ุงููุฌูุฏ"],
        "entry_cost": {"ูุงุณ": 75},
        "rewards": {
            "ุฐูุจ": [1000, 1500],
            "ุฏููุงุฑ": [5000000, 8000000],
            "experience": [3000, 4000]
        },
        "rare_drops": {
            "๐๏ธ ุนูู ุงูุจุตูุฑุฉ ุงูููููุฉ": 0.001,  # 0.1% ูุงุฏุฑ ููุบุงูุฉ
            "๐ ุนุจุงุกุฉ ุงููุฌูู": 0.01,
            "๐ฎ ุฌููุฑุฉ ุงูุฃุจุนุงุฏ": 0.03
        },
        "required_level": 100,
        "estimated_time": "45-60 ุฏูููุฉ"
    }
}

# ======== ูุชุฌุฑ ุงูุนุชุงุฏ ========
EQUIPMENT_SHOP = {
    # ุฃุณูุญุฉ
    "โ๏ธ ุณูู ุฎุดุจู": {
        "type": "weapon",
        "attack": 10,
        "defense": 0,
        "price": {"ูุงุณ": 2},
        "description": "ุณูู ุจุณูุท ูููุจุชุฏุฆูู"
    },
    "๐ก๏ธ ุณูู ูููุงุฐู": {
        "type": "weapon",
        "attack": 25,
        "defense": 0,
        "price": {"ูุงุณ": 5},
        "description": "ุณูู ููู ูู ุงููููุงุฐ ุงููุตููู"
    },
    "โ๏ธ ุณูู ุงูุชููู": {
        "type": "weapon",
        "attack": 50,
        "defense": 5,
        "price": {"ูุงุณ": 15},
        "description": "ุณูู ุฃุณุทูุฑู ูุตููุน ูู ูุดูุฑ ุงูุชููู"
    },
    "๐ฑ ุฑูุญ ุงูุขููุฉ": {
        "type": "weapon",
        "attack": 80,
        "defense": 10,
        "price": {"ูุงุณ": 30},
        "description": "ุฑูุญ ููุฏุณ ูุญูู ููุฉ ุงูุขููุฉ"
    },

    # ุฏุฑูุน
    "๐ก๏ธ ุฏุฑุน ุฌูุฏู": {
        "type": "armor",
        "attack": 0,
        "defense": 15,
        "price": {"ูุงุณ": 3},
        "description": "ุฏุฑุน ุฎููู ูู ุงูุฌูุฏ ุงููุฏุจูุบ"
    },
    "๐ก๏ธ ุฏุฑุน ุญุฏูุฏู": {
        "type": "armor",
        "attack": 0,
        "defense": 30,
        "price": {"ูุงุณ": 7},
        "description": "ุฏุฑุน ููู ูู ุงูุญุฏูุฏ ุงููููู"
    },
    "๐ก๏ธ ุฏุฑุน ุงูุชููู": {
        "type": "armor",
        "attack": 5,
        "defense": 60,
        "price": {"ูุงุณ": 20},
        "description": "ุฏุฑุน ุฃุณุทูุฑู ูุตููุน ูู ูุดูุฑ ุงูุชููู ุงูุฐูุจู"
    },

    # ุฎูุฐุงุช
    "โ๏ธ ุฎูุฐุฉ ุจุฑููุฒูุฉ": {
        "type": "helmet",
        "attack": 2,
        "defense": 8,
        "price": {"ูุงุณ": 2},
        "description": "ุฎูุฐุฉ ุจุณูุทุฉ ูู ุงูุจุฑููุฒ"
    },
    "๐ ุชุงุฌ ุงููุญุงุฑุจ": {
        "type": "helmet",
        "attack": 8,
        "defense": 15,
        "price": {"ูุงุณ": 12},
        "description": "ุชุงุฌ ูุฑูุฒ ูุดุฌุงุนุฉ ุงููุญุงุฑุจูู"
    },

    # ุฎูุงุชู
    "๐ ุฎุงุชู ุงูููุฉ": {
        "type": "ring",
        "attack": 15,
        "defense": 5,
        "price": {"ูุงุณ": 10},
        "description": "ุฎุงุชู ุณุญุฑู ูุฒูุฏ ูู ุงูููุฉ"
    },
    "๐ ุฎุงุชู ุงูุญูุงูุฉ": {
        "type": "ring",
        "attack": 3,
        "defense": 20,
        "price": {"ูุงุณ": 10},
        "description": "ุฎุงุชู ุณุญุฑู ูููุฑ ุญูุงูุฉ ุฅุถุงููุฉ"
    },

    # ูุณุชูููุงุช
    "๐งช ุฌุฑุนุฉ ุงูุดูุงุก": {
        "type": "consumable",
        "effect": "heal",
        "value": 100,
        "price": {"ูุงุณ": 1},
        "description": "ุชุนูุฏ 100 ููุทุฉ ุตุญุฉ"
    },
    "โก ุฌุฑุนุฉ ุงูููุฉ": {
        "type": "consumable",
        "effect": "attack_boost",
        "value": 20,
        "duration": 3,
        "price": {"ูุงุณ": 3},
        "description": "ุชุฒูุฏ ุงููุฌูู ุจู 20 ููุทุฉ ูู 3 ุฌููุงุช"
    }
}

# ======== ููุงูุขุช ุงูุงุฎุชุตุงุตุงุช ========
SPECIALIZATION_BONUSES = {
    "ูุญุงุฑุจ": {
        "attack_bonus": 1.2,
        "defense_bonus": 1.1,
        "hp_bonus": 1.3,
        "special_ability": "ุถุฑุจุฉ ูุงุชูุฉ: ูุฑุตุฉ 15% ูุถุฑุจุฉ ูุถุงุนูุฉ",
        "dungeon_bonus": "ููุงููุฉ ุฃูุจุฑ ููุฃุถุฑุงุฑ ุงูุฌุณุฏูุฉ"
    },
    "ุดุงูุงู": {
        "attack_bonus": 1.0,
        "defense_bonus": 1.3,
        "hp_bonus": 1.4,
        "special_ability": "ุดูุงุก ุฐุงุชู: ุงุณุชุนุงุฏุฉ 10% ูู ุงูุตุญุฉ ูู ุฌููุฉ",
        "dungeon_bonus": "ููุงููุฉ ููุณุญุฑ ูุงูุชุฃุซูุฑุงุช ุงูุณูุจูุฉ"
    },
    "ูููุฌุง": {
        "attack_bonus": 1.4,
        "defense_bonus": 0.9,
        "hp_bonus": 1.1,
        "special_ability": "ูุฌูู ุฎุงุทู: ูุฌูุชุงู ูู ุฌููุฉ ูุงุญุฏุฉ ุฃุญูุงูุงู",
        "dungeon_bonus": "ูุฑุตุฉ ุชุฌูุจ ุงููุฌูุงุช ุจูุณุจุฉ 20%"
    },
    "ุณูุฑุง": {
        "attack_bonus": 1.1,
        "defense_bonus": 1.2,
        "hp_bonus": 1.2,
        "special_ability": "ุนูุณ ุงูุถุฑุฑ: 25% ูู ุงูุถุฑุฑ ุงูููุณุชูุจู ููุนุงุฏ ููุนุฏู",
        "dungeon_bonus": "ุงูุชุตุงุต ุฌุฒุก ูู ุทุงูุฉ ุงูุฃุนุฏุงุก ุงูููุฒูููู"
    }
}

# ======== ูุธุงุฆู ุงููุธุงู ========

def load_dungeons_data():
    """ุชุญููู ุจูุงูุงุช ุงูุณุฑุงุฏูุจ"""
    if not os.path.exists(DUNGEONS_FILE):
        return {}
    with open(DUNGEONS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_dungeons_data(data):
    """ุญูุธ ุจูุงูุงุช ุงูุณุฑุงุฏูุจ"""
    with open(DUNGEONS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def load_equipment_data():
    """ุชุญููู ุจูุงูุงุช ุงูุนุชุงุฏ"""
    if not os.path.exists(EQUIPMENT_FILE):
        return {}
    with open(EQUIPMENT_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_equipment_data(data):
    """ุญูุธ ุจูุงูุงุช ุงูุนุชุงุฏ"""
    with open(EQUIPMENT_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def get_user_dungeon_progress(user_id):
    """ุฌูุจ ุชูุฏู ุงููุณุชุฎุฏู ูู ุงูุณุฑุงุฏูุจ"""
    data = load_dungeons_data()
    return data.get(str(user_id), {
        "completed_dungeons": [],
        "total_victories": 0,
        "total_defeats": 0,
        "daily_attempts": {},
        "best_times": {}
    })

def update_user_dungeon_progress(user_id, dungeon_name, victory, battle_time=None):
    """ุชุญุฏูุซ ุชูุฏู ุงููุณุชุฎุฏู"""
    data = load_dungeons_data()
    user_progress = data.get(str(user_id), {
        "completed_dungeons": [],
        "total_victories": 0,
        "total_defeats": 0,
        "daily_attempts": {},
        "best_times": {}
    })

    # ุชุญุฏูุซ ุงูุฅุญุตุงุฆูุงุช
    if victory:
        user_progress["total_victories"] += 1
        if dungeon_name not in user_progress["completed_dungeons"]:
            user_progress["completed_dungeons"].append(dungeon_name)

        # ุชุญุฏูุซ ุฃูุถู ููุช
        if battle_time and (dungeon_name not in user_progress["best_times"] or 
                           battle_time < user_progress["best_times"][dungeon_name]):
            user_progress["best_times"][dungeon_name] = battle_time
    else:
        user_progress["total_defeats"] += 1

    # ุชุญุฏูุซ ุงููุญุงููุงุช ุงูููููุฉ
    today = datetime.now().strftime("%Y-%m-%d")
    user_progress["daily_attempts"][today] = user_progress["daily_attempts"].get(today, 0) + 1

    data[str(user_id)] = user_progress
    save_dungeons_data(data)

def get_user_equipment(user_id):
    """ุฌูุจ ุนุชุงุฏ ุงููุณุชุฎุฏู"""
    data = load_equipment_data()
    return data.get(str(user_id), {
        "weapon": None,
        "armor": None,
        "helmet": None,
        "ring": None,
        "consumables": []
    })

def load_dungeon_cooldowns():
    """ุชุญููู ุจูุงูุงุช ุงูุชุจุฑูุฏ"""
    if not os.path.exists(DUNGEON_COOLDOWNS_FILE):
        return {}
    with open(DUNGEON_COOLDOWNS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_dungeon_cooldowns(cooldowns):
    """ุญูุธ ุจูุงูุงุช ุงูุชุจุฑูุฏ"""
    with open(DUNGEON_COOLDOWNS_FILE, "w", encoding="utf-8") as f:
        json.dump(cooldowns, f, ensure_ascii=False, indent=4)

def check_dungeon_cooldown(user_id, cooldown_type, dungeon_name=None):
    """ูุญุต ุชุจุฑูุฏ ูุญุฏุฏ"""
    cooldowns = load_dungeon_cooldowns()
    user_cooldowns = cooldowns.get(str(user_id), {})
    current_time = time.time()

    # ุฅูุดุงุก ููุชุงุญ ูุฑูุฏ ููุชุจุฑูุฏ
    cooldown_key = f"{cooldown_type}_{dungeon_name}" if dungeon_name else cooldown_type
    last_time = user_cooldowns.get(cooldown_key, 0)

    time_passed = current_time - last_time
    required_time = DUNGEON_COOLDOWNS.get(cooldown_type, 0)

    if time_passed >= required_time:
        return True, 0
    else:
        remaining = required_time - time_passed
        return False, remaining

def update_dungeon_cooldown(user_id, cooldown_type, dungeon_name=None):
    """ุชุญุฏูุซ ุชุจุฑูุฏ ูุญุฏุฏ"""
    cooldowns = load_dungeon_cooldowns()
    user_cooldowns = cooldowns.setdefault(str(user_id), {})

    cooldown_key = f"{cooldown_type}_{dungeon_name}" if dungeon_name else cooldown_type
    user_cooldowns[cooldown_key] = time.time()

    save_dungeon_cooldowns(cooldowns)

def format_cooldown_time(seconds):
    """ุชูุณูู ููุช ุงูุชุจุฑูุฏ"""
    if seconds < 60:
        return f"{int(seconds)} ุซุงููุฉ"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes} ุฏูููุฉ ู {secs} ุซุงููุฉ"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours} ุณุงุนุฉ ู {minutes} ุฏูููุฉ"

def can_enter_dungeon(user_id, dungeon_name):
    """ูุญุต ุฅููุงููุฉ ุฏุฎูู ุงูุณุฑุฏุงุจ ูุน ูุธุงู ุงูุชุจุฑูุฏ ุงููุชุทูุฑ"""
    from data_utils import load_data

    dungeon = DUNGEONS[dungeon_name]
    user_data = load_data().get(str(user_id), {})

    # ูุญุต ุงููุณุชูู ุงููุทููุจ
    user_level = user_data.get("level", 1)
    if user_level < dungeon["required_level"]:
        return False, f"โ ุชุญุชุงุฌ ุฅูู ูุณุชูู {dungeon['required_level']} ุนูู ุงูุฃูู ูุฏุฎูู ูุฐุง ุงูุณุฑุฏุงุจ"

    # ูุญุต ุชุจุฑูุฏ ุงูุฏุฎูู ุงูุนุงู
    can_enter, remaining = check_dungeon_cooldown(user_id, "entry")
    if not can_enter:
        time_str = format_cooldown_time(remaining)
        return False, f"โณ ูุฌุจ ุงูุงูุชุธุงุฑ {time_str} ูุจู ุฏุฎูู ุฃู ุณุฑุฏุงุจ ุขุฎุฑ"

    # ูุญุต ุชุจุฑูุฏ ุงูุฒุนูู ุงููุญุฏุฏ
    can_fight_boss, boss_remaining = check_dungeon_cooldown(user_id, "boss_defeat", dungeon_name)
    if not can_fight_boss:
        time_str = format_cooldown_time(boss_remaining)
        return False, f"โณ ููุฏ ูุฒูุช ูุฐุง ุงูุฒุนูู ูุคุฎุฑุงู. ุงูุชุธุฑ {time_str} ูููุงุฌูุชู ูุฌุฏุฏุงู"

    # ูุญุต ุนููุจุฉ ุงูููุช
    can_fight_after_death, death_remaining = check_dungeon_cooldown(user_id, "death_penalty")
    if not can_fight_after_death:
        time_str = format_cooldown_time(death_remaining)
        return False, f"๐ ุนููุจุฉ ุงููุฒููุฉ ูุดุทุฉ. ุงูุชุธุฑ {time_str} ููุชุนุงูู"

    # ูุญุต ุงููุญุงููุงุช ุงูููููุฉ ุงููุญุณูุฉ
    progress = get_user_dungeon_progress(user_id)
    today = datetime.now().strftime("%Y-%m-%d")
    daily_attempts = progress["daily_attempts"].get(today, 0)

    # ุญุฏ ุฃูุตู 5 ูุญุงููุงุช ููุณุฑุงุฏูุจ ุงูุนุงุฏูุฉุ 3 ููุณุฑุงุฏูุจ ุงูุฃุณุทูุฑูุฉ
    max_attempts = 3 if dungeon.get("tier") in ["ุฃุณุทูุฑู", "ููุญูู", "ุฃุณุทูุฑู+"] else 5

    if daily_attempts >= max_attempts:
        return False, f"โ ููุฏ ุงุณุชููุฏุช ูุญุงููุงุชู ุงูููููุฉ ({daily_attempts}/{max_attempts})"

    # ูุญุต ุงููุงุณ ุงููุทููุจ
    required_diamonds = dungeon["entry_cost"]["ูุงุณ"]
    user_diamonds = user_data.get("balance", {}).get("ูุงุณ", 0)

    if user_diamonds < required_diamonds:
        return False, f"โ ุชุญุชุงุฌ ุฅูู {required_diamonds} ูุงุณ ููุฏุฎูู (ูุฏูู {user_diamonds})"

    # ูุญุต ูุชุทูุจุงุช ุฎุงุตุฉ ููุณุฑุงุฏูุจ ุงููุชูุฏูุฉ
    if dungeon["level"] >= 6:
        victories = progress["total_victories"]
        if victories < 10:
            return False, f"โ ุชุญุชุงุฌ ุฅูู {10 - victories} ุงูุชุตุงุฑุงุช ุฅุถุงููุฉ ูู ุงูุณุฑุงุฏูุจ ููุชุญ ูุฐุง ุงููุณุชูู"

    return True, f"โ ููููู ุฏุฎูู ุงูุณุฑุฏุงุจ ({daily_attempts + 1}/{max_attempts} ูุญุงููุงุช ุงูููู)"

def calculate_combat_stats(user_data, equipment):
    """ุญุณุงุจ ุงูุฅุญุตุงุฆูุงุช ุงููุชุงููุฉ"""
    specialization = user_data.get("specialization", {})
    spec_type = specialization.get("type", "ูุญุงุฑุจ") if specialization else "ูุญุงุฑุจ"
    spec_rank = specialization.get("rank", 1) if specialization else 1
    user_level = user_data.get("level", 1)

    # ุงูุฅุญุตุงุฆูุงุช ุงูุฃุณุงุณูุฉ
    base_hp = 100 + (user_level * 10)
    base_attack = 20 + (user_level * 2)
    base_defense = 10 + (user_level * 1)

    # ููุงูุขุช ุงูุงุฎุชุตุงุต
    spec_bonus = SPECIALIZATION_BONUSES.get(spec_type, SPECIALIZATION_BONUSES["ูุญุงุฑุจ"])

    # ุชุทุจูู ููุงูุขุช ุงูุงุฎุชุตุงุต
    hp = int(base_hp * spec_bonus["hp_bonus"] * (1 + (spec_rank - 1) * 0.1))
    attack = int(base_attack * spec_bonus["attack_bonus"] * (1 + (spec_rank - 1) * 0.1))
    defense = int(base_defense * spec_bonus["defense_bonus"] * (1 + (spec_rank - 1) * 0.1))

    # ููุงูุขุช ุงูุนุชุงุฏ
    for slot, item_name in equipment.items():
        if item_name and slot != "consumables":
            item_stats = EQUIPMENT_SHOP.get(item_name, {})
            attack += item_stats.get("attack", 0)
            defense += item_stats.get("defense", 0)

    return {
        "hp": hp,
        "max_hp": hp,
        "attack": attack,
        "defense": defense,
        "specialization": spec_type,
        "rank": spec_rank
    }

def simulate_dungeon_battle(player_stats, dungeon_name):
    """ูุญุงูุงุฉ ูุนุฑูุฉ ุงูุณุฑุฏุงุจ ุงููุญุณูุฉ ูุน ูุฏุฑุงุช ุงูุฒุนูุงุก"""
    dungeon = DUNGEONS[dungeon_name]
    battle_log = []

    # ุฅุญุตุงุฆูุงุช ุงูุฒุนูู
    boss_hp = dungeon["boss_hp"]
    boss_max_hp = boss_hp
    boss_attack = dungeon["boss_attack"]
    boss_defense = dungeon["boss_defense"]
    boss_abilities = dungeon.get("boss_abilities", [])

    # ุญุงูุงุช ุฎุงุตุฉ ููุฒุนูู
    boss_status = {
        "rage_mode": False,
        "shield_active": False,
        "ability_cooldown": 0
    }

    # ุฅุญุตุงุฆูุงุช ุงููุงุนุจ
    player_hp = player_stats["hp"]
    player_max_hp = player_hp
    player_attack = player_stats["attack"]
    player_defense = player_stats["defense"]
    spec_type = player_stats["specialization"]

    battle_log.append("โ๏ธ ุจุฏุก ุงููุนุฑูุฉ!")
    battle_log.append(f"๐ก๏ธ ุฃูุช: {player_hp} HP | โ๏ธ {player_attack} ATK | ๐ก๏ธ {player_defense} DEF")
    battle_log.append(f"๐น {dungeon['boss']}: {boss_hp} HP | โ๏ธ {boss_attack} ATK | ๐ก๏ธ {boss_defense} DEF")
    battle_log.append("โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ")

    turn = 1

    while player_hp > 0 and boss_hp > 0:
        battle_log.append(f"๐ฏ ุงูุฌููุฉ {turn}")

        # ูุฌูู ุงููุงุนุจ
        damage_to_boss = max(1, player_attack - boss_defense)

        # ูุฏุฑุงุช ุฎุงุตุฉ ุจุงูุงุฎุชุตุงุต
        special_happened = False

        if spec_type == "ูุญุงุฑุจ" and random.random() < 0.15:
            damage_to_boss *= 2
            battle_log.append("๐ฅ ุถุฑุจุฉ ูุงุชูุฉ! ุงูุถุฑุฑ ูุถุงุนู!")
            special_happened = True
        elif spec_type == "ูููุฌุง" and random.random() < 0.25:
            damage_to_boss += max(1, (player_attack // 2) - boss_defense)
            battle_log.append("โก ูุฌูู ุฎุงุทู! ูุฌูุฉ ุฅุถุงููุฉ!")
            special_happened = True
        elif spec_type == "ุณูุฑุง" and random.random() < 0.20:
            reflected_damage = damage_to_boss // 4
            battle_log.append(f"๐ฎ ุนูุณ ุงูุถุฑุฑ! ุงูุฒุนูู ุชููู {reflected_damage} ุถุฑุฑ ุฅุถุงูู!")
            damage_to_boss += reflected_damage
            special_happened = True

        boss_hp -= damage_to_boss
        battle_log.append(f"โ๏ธ ุฃูุช ุชูุงุฌู: -{damage_to_boss} HP ููุฒุนูู (ูุชุจูู: {max(0, boss_hp)})")

        if boss_hp <= 0:
            break

        # ูุฌูู ุงูุฒุนูู ูุน ูุฏุฑุงุช ุฎุงุตุฉ
        base_damage = max(1, boss_attack - player_defense)

        # ูุญุต ูุฏุฑุงุช ุงูุฒุนูู ุงูุฎุงุตุฉ
        boss_used_ability = False
        if boss_abilities and boss_status["ability_cooldown"] <= 0 and random.random() < 0.3:
            ability = random.choice(boss_abilities)
            boss_status["ability_cooldown"] = 3
            boss_used_ability = True

            if "ุตุงุนูุฉ ุงูุบุถุจ" in ability:
                base_damage = int(base_damage * 1.5)
                battle_log.append(f"โก {ability}! ุงูุถุฑุฑ ูุถุงุนู!")
            elif "ุฏุฑุน ููุฏุณ" in ability:
                boss_status["shield_active"] = True
                battle_log.append(f"๐ก๏ธ {ability}! ุงูุฒุนูู ูุญูู ููุฌููุงุช ุงููุงุฏูุฉ!")
            elif "ููุณ ุงููุงุฑ ุงููุฏูุฑ" in ability:
                base_damage = int(base_damage * 2)
                battle_log.append(f"๐ฅ {ability}! ูุฌูู ูุฏูุฑ!")
            elif "ูุธุฑุฉ ุงูุฌููู" in ability:
                if random.random() < 0.5:
                    battle_log.append(f"๐๏ธ {ability}! ุชุฌูุฏุช ูู ุงูุฑุนุจ ูุฌููุฉ ูุงุญุฏุฉ!")
                    player_hp -= base_damage
                    battle_log.append(f"๐น ุงูุฒุนูู ููุงุฌู ุจูุง ููุงููุฉ: -{base_damage} HP")
                    turn += 1
                    continue

        # ุชูููู ุชุจุฑูุฏ ุงููุฏุฑุงุช
        if boss_status["ability_cooldown"] > 0:
            boss_status["ability_cooldown"] -= 1

        # ูุถุน ุงูุบุถุจ ุนูุฏ ุงูุฎูุงุถ ุงูุตุญุฉ
        if boss_hp < boss_max_hp * 0.3 and not boss_status["rage_mode"]:
            boss_status["rage_mode"] = True
            boss_attack = int(boss_attack * 1.3)
            battle_log.append("๐ก ุงูุฒุนูู ุฏุฎู ูู ูุถุน ุงูุบุถุจ! ูุฌููู ุฒุงุฏ ุจูุณุจุฉ 30%!")

        # ุญุณุงุจ ุงูุถุฑุฑ ุงูููุงุฆู ููุงุนุจ
        final_damage = base_damage

        # ุชูููู ุงูุถุฑุฑ ุฅุฐุง ูุงู ุงูุฏุฑุน ูุดุทุงู
        if boss_status["shield_active"]:
            final_damage = int(final_damage * 0.7)
            boss_status["shield_active"] = False

        # ูุฏุฑุฉ ุงูุชุฌูุจ ูููููุฌุง
        if spec_type == "ูููุฌุง" and random.random() < 0.25:
            battle_log.append("๐จ ุชุฌูุจุช ุงููุฌูู ุจุฎูุฉ ุงููููุฌุง!")
        else:
            # ูุฏุฑุฉ ุนูุณ ุงูุถุฑุฑ ูุณูุฑุง
            if spec_type == "ุณูุฑุง" and random.random() < 0.30:
                reflected = final_damage // 3
                boss_hp -= reflected
                battle_log.append(f"๐ฎ ุนูุณุช ุฌุฒุกุงู ูู ุงูุถุฑุฑ: -{reflected} HP ููุฒุนูู")

            player_hp -= final_damage
            battle_log.append(f"๐น ุงูุฒุนูู ููุงุฌู: -{final_damage} HP ูู (ูุชุจูู: {max(0, player_hp)})")

        # ุดูุงุก ุงูุดุงูุงู
        if spec_type == "ุดุงูุงู" and player_hp > 0:
            heal_amount = max(1, player_max_hp // 10)
            player_hp = min(player_max_hp, player_hp + heal_amount)
            battle_log.append(f"โจ ุดูุงุก ุฐุงุชู: +{heal_amount} HP")

        battle_log.append("โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ")
        turn += 1

        # ุญุฏ ุฃูุตู ููุฌููุงุช ูุชุฌูุจ ุงููุนุงุฑู ุงููุง ููุงุฆูุฉ
        if turn > 20:
            battle_log.append("โฐ ุงููุนุฑูุฉ ุทูููุฉ ุฌุฏุงู! ุงูุชูุช ุจุงูุชุนุงุฏู.")
            break

    # ุชุญุฏูุฏ ุงููุชูุฌุฉ
    victory = boss_hp <= 0 and player_hp > 0

    if victory:
        battle_log.append("โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ")
        battle_log.append(f"๐ **ุงููุตุฑ!** ูุฒูุช {dungeon['boss']}!")

        # ุญุณุงุจ ุงูููุงูุขุช ุงููุญุณูุฉ
        rewards = {}

        # ุงูููุงูุขุช ุงูุฃุณุงุณูุฉ
        gold_reward = random.randint(*dungeon["rewards"]["ุฐูุจ"])
        dollar_reward = random.randint(*dungeon["rewards"]["ุฏููุงุฑ"])
        exp_reward = random.randint(*dungeon["rewards"].get("experience", [100, 200]))

        # ููุงูุขุช ุฅุถุงููุฉ ุญุณุจ ุงูุฃุฏุงุก
        performance_bonus = 1.0
        if player_hp > player_max_hp * 0.8:
            performance_bonus = 1.5
            battle_log.append("๐ ุฃุฏุงุก ููุชุงุฒ! ููุงูุขุช ูุถุงุนูุฉ!")
        elif player_hp > player_max_hp * 0.5:
            performance_bonus = 1.2
            battle_log.append("โญ ุฃุฏุงุก ุฌูุฏ! ููุงูุฃุฉ ุฅุถุงููุฉ!")

        rewards["ุฐูุจ"] = int(gold_reward * performance_bonus)
        rewards["ุฏููุงุฑ"] = int(dollar_reward * performance_bonus)
        rewards["experience"] = int(exp_reward * performance_bonus)

        # ูุฑุตุฉ ุงูุญุตูู ุนูู ูุทุน ูุงุฏุฑุฉ ูู ุงูุณุฑุฏุงุจ
        rare_drops = dungeon.get("rare_drops", {})
        obtained_rares = []

        for item_name, drop_chance in rare_drops.items():
            if random.random() < drop_chance:
                obtained_rares.append(item_name)
                battle_log.append(f"โจ ุญุตูุช ุนูู ูุทุนุฉ ูุงุฏุฑุฉ: {item_name}!")

        if obtained_rares:
            rewards["rare_items"] = obtained_rares

        # ููุงูุฃุฉ ุฎุงุตุฉ ููุณุฑุงุฏูุจ ุนุงููุฉ ุงููุณุชูู
        if dungeon["level"] >= 5:
            if random.random() < 0.1:
# 10% ูุฑุตุฉ
                bonus_diamonds = random.randint(5, 15)
                rewards["ูุงุณ"] = bonus_diamonds
                battle_log.append(f"๐ ููุงูุฃุฉ ุฎุงุตุฉ: {bonus_diamonds} ูุงุณ!")

        # ููุงูุฃุฉ ุงูุฅูุฌุงุฒ ุงูุฃูู
        progress = get_user_dungeon_progress(player_stats.get("user_id", ""))
        if dungeon_name not in progress.get("completed_dungeons", []):
            rewards["first_completion_bonus"] = True
            rewards["ุฐูุจ"] = int(rewards["ุฐูุจ"] * 2)
            battle_log.append("๐ ููุงูุฃุฉ ุงูุฅูุฌุงุฒ ุงูุฃูู! ูุถุงุนูุฉ ุงูุฐูุจ!")

        battle_log.append(f"๐ฐ ุงูููุงูุขุช: {gold_reward} ุฐูุจุ {dollar_reward:,} ุฏููุงุฑ")

    else:
        battle_log.append("โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ")
        battle_log.append("๐ **ุงููุฒููุฉ!** ูู ุชุชููู ูู ูุฒููุฉ ุงูุฒุนูู.")
        battle_log.append("๐ก ุญุงูู ุชุญุณูู ุนุชุงุฏู ุฃู ุฑูุน ูุณุชูุงู.")
        rewards = None

    return victory, battle_log, rewards

def setup_dungeons_commands(bot):
    """ุฅุนุฏุงุฏ ุฃูุงูุฑ ุงูุณุฑุงุฏูุจ"""

    @bot.command(name="ุณุฑุงุฏูุจ")
    async def dungeons_command(ctx):
        await show_dungeons_menu(ctx)

async def show_dungeons_menu(ctx):
    """ุนุฑุถ ูุงุฆูุฉ ุงูุณุฑุงุฏูุจ"""
    embed = discord.Embed(
        title="๐ฐ ุณุฑุงุฏูุจ ุงููุบุงูุฑุงุช",
        description="ุงุฎุชุฑ ุงูุณุฑุฏุงุจ ุงูุฐู ุชุฑูุฏ ุงุณุชูุดุงูู:",
        color=0x8B4513
    )

    for dungeon_name, dungeon_info in DUNGEONS.items():
        embed.add_field(
            name=f"{dungeon_info['level']} {dungeon_name}",
            value=f"{dungeon_info['description']}\nุงูููุงูุขุช: {dungeon_info['rewards']['ุฐูุจ']} ุฐูุจุ {dungeon_info['rewards']['ุฏููุงุฑ']} ุฏููุงุฑ",
            inline=True
        )

    #view = DungeonSelectionView() # remove this for now, not fully implemented
    await ctx.send(embed=embed) #, view=view) remove the view for now, not fully implemented
